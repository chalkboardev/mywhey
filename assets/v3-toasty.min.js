/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/qf/v3-toasty.js":
/*!**************************************!*\
  !*** ./resources/js/qf/v3-toasty.js ***!
  \**************************************/
/***/ (() => {

eval("function _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar Toaster = /*#__PURE__*/function () {\n  function Toaster() {\n    _classCallCheck(this, Toaster);\n    this.init();\n    this.toasts = [];\n  }\n\n  // Methods - - - - - - - - - - - - - - - - - - - - - - - - \n\n  // Initialisation \n  return _createClass(Toaster, [{\n    key: \"init\",\n    value: function init() {\n      this.createToastyContainer();\n      this.stopScrolling();\n      this.setToastPositions();\n      console.log('🥪🥪 TOASTY INITIALIZED 🥪🥪');\n    }\n\n    // Create Container\n  }, {\n    key: \"createToastyContainer\",\n    value: function createToastyContainer() {\n      if (!document.querySelector('#toasty-zone')) {\n        var toasty_container = document.createElement('div');\n        toasty_container.id = 'toasty-zone';\n        document.querySelector('body').append(toasty_container);\n\n        // Set Container Property\n        this.container = toasty_container;\n      } else {\n        console.log('🥪 Toasty already exists...');\n      }\n    }\n\n    // Add Toast\n  }, {\n    key: \"addToast\",\n    value: function addToast(options) {\n      console.log('options: ', options);\n      this.toasts.push(new Toast(options));\n      this.setToastPositions();\n    }\n\n    // Set Toast Positions \n  }, {\n    key: \"setToastPositions\",\n    value: function setToastPositions() {\n      var _this = this;\n      var gap = 10;\n      var toasts = this.container.querySelectorAll('output');\n      var header = document.querySelector('.mega-menu');\n      var announcement = document.querySelector('.announcement-bar-slider');\n\n      // Get Distance from top of window\n      var space = 0;\n      if (announcement && window.pageYOffset > announcement.offsetHeight) space = window.innerHeight - (window.innerHeight - header.offsetHeight);else if (header) space = window.innerHeight - (window.innerHeight - (header.offsetHeight + announcement.offsetHeight));\n      this.offset = space + 15;\n      if (toasts) {\n        toasts.forEach(function (toast, i) {\n          var rect = toast.getBoundingClientRect();\n          var height = rect.height;\n\n          // Unless Dragging\n          if (!toast.classList.contains('dragging')) {\n            toast.style.top = \"\".concat(_this.offset, \"px\");\n            _this.offset += height + gap;\n          }\n        });\n        //console.log('🥪 toasts: ', toasts, '↔️ offset: ', this.offset + 'px');\n      }\n    }\n\n    // Check for Scrolling, position toasts\n  }, {\n    key: \"stopScrolling\",\n    value: function stopScrolling() {\n      var _this2 = this;\n      var scrollingTimeout;\n      window.addEventListener('scroll', function (e) {\n        window.clearTimeout(scrollingTimeout);\n        _this2.scrolling = true;\n        scrollingTimeout = setTimeout(function () {\n          _this2.scrolling = false;\n          //console.log('stopped scrolling...')\n          _this2.setToastPositions();\n        }, 150);\n      }, false);\n    }\n  }]);\n}();\n;\nvar Toast = /*#__PURE__*/function () {\n  function Toast(options) {\n    _classCallCheck(this, Toast);\n    this.container = document.getElementById('toasty-zone');\n    this.id = this.createID();\n    this.title = options.title;\n    this.message = options.message;\n    this.background = options.background;\n    this.image = options.image;\n    this.delay = options.delay ? options.delay : 50000;\n    this.delay_in_seconds = this.delay / 1000;\n    this.interacting = false;\n    this.node = this.make();\n    this.add();\n    //console.log('🍞 CONTAINER: ', this.container, \"🥪 NODE: \", this.node);\n\n    // Init Additional Features \n    this.slideToDismiss();\n    this.close();\n  }\n\n  // Helper Methods - - - - - - - - - - - - - - - - - - - - - - - - \n\n  // Generates Unique ID\n  return _createClass(Toast, [{\n    key: \"createID\",\n    value: function createID() {\n      var randomNum = Math.floor(Math.random() * 100);\n      var dateNow = Date.now();\n      var uuid = \"toast-node__\".concat(dateNow + randomNum);\n      return uuid;\n    }\n\n    // Delay - Returns a promise after a given amount of time (ms)\n  }, {\n    key: \"wait\",\n    value: function wait(ms) {\n      var _this3 = this;\n      var cancellable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return new Promise(function (resolve, reject) {\n        var timeout = setTimeout(function () {\n          resolve();\n          //console.log('delay finished...');\n        }, ms);\n        if (cancellable == true) {\n          var interval = setInterval(function () {\n            if (_this3.interacting == true) {\n              //console.log('cancelled slide out');\n              clearTimeout(timeout);\n              clearInterval(interval);\n            }\n          }, 300);\n        }\n      });\n    }\n\n    // Toast Animations Handler\n  }, {\n    key: \"animateToast\",\n    value: function animateToast(animation) {\n      var keyframes;\n      var timing;\n      switch (animation) {\n        case 'slide-in':\n          // Slide in animation\n          keyframes = [{\n            translate: \"calc(150% + var(--drag-offset)) 0 0\"\n          }, {\n            translate: \"calc(0% + var(--drag-offset)) 0 0\"\n          }];\n          timing = {\n            duration: 300,\n            fill: 'forwards'\n          };\n          break;\n        case 'slide-out':\n          // Slide Out animation\n          keyframes = [{\n            translate: \"calc(0% + var(--drag-offset)) 0 0\"\n          }, {\n            translate: \"calc(150% + var(--drag-offset)) 0 0\"\n          }];\n          timing = {\n            duration: 300,\n            fill: 'forwards'\n          };\n          break;\n        case 'slide-loop':\n        default:\n          // Loop Animation\n          keyframes = [{\n            translate: \"calc(0% + var(--drag-offset)) 0 0\"\n          }];\n          timing = {\n            duration: Infinity,\n            fill: 'forwards'\n          };\n          break;\n      }\n      this.node.animate(keyframes, timing);\n      //console.log(`🔄 animating${' ' + animation}...`);\n    }\n\n    // Core Methods - - - - - - - - - - - - - - - - - - - - - - - - \n\n    // Creates Toast Element\n  }, {\n    key: \"make\",\n    value: function make() {\n      // Toast Container\n      var node = document.createElement('output');\n      node.classList.add('toasty');\n      node.setAttribute('role', 'status');\n      node.setAttribute('aria-live', 'polite');\n      node.setAttribute('data-toasty-id', this.id);\n\n      // Set Top Offset\n      node.style.top = window.toasty.offset + 'px';\n\n      // CSS Properties\n      node.style.setProperty('--animation-delay', this.delay_in_seconds + 's');\n      node.style.setProperty('--drag-offset', 0 + 'px');\n      if (this.background) {\n        node.classList.add('bg');\n        node.style.setProperty('--background', this.background);\n      }\n\n      // Icon / Image Element\n      if (this.image) {\n        node.classList.add('img');\n        var img_node = document.createElement('img');\n        img_node.classList.add('toasty-image');\n        img_node.setAttribute('src', this.image);\n        img_node.setAttribute('alt', this.title);\n        node.append(img_node);\n      }\n\n      // Title Element\n      if (this.title) {\n        var title_node = document.createElement('div');\n        title_node.classList.add('toasty-title');\n        title_node.innerHTML = this.title;\n        node.append(title_node);\n      }\n\n      // Body Element\n      if (this.message) {\n        var body_node = document.createElement('div');\n        body_node.classList.add('toasty-body');\n        body_node.innerHTML = this.message;\n        node.append(body_node);\n      }\n\n      // Close Button \n      var svg = \"\\n            <svg width=\\\"20.042\\\" height=\\\"20.042\\\" viewBox=\\\"0 0 20.042 20.042\\\">\\n                <path data-name=\\\"toasty-close\\\" d=\\\"M27.542,9.519,25.523,7.5l-8,8-8-8L7.5,9.519l8,8-8,8,2.019,2.019,8-8,8,8,2.019-2.019-8-8Z\\\" transform=\\\"translate(-7.5 -7.5)\\\" fill=\\\"currentColor\\\"></path>\\n            </svg>\\n        \";\n      var close_btn = document.createElement('div');\n      close_btn.classList.add('toasty-close');\n      close_btn.innerHTML = svg;\n      node.append(close_btn);\n      //console.log('🥪 ADDED TOAST...', node );\n\n      return node;\n    }\n\n    // Add Toast Element to the DOM\n  }, {\n    key: \"add\",\n    value: function () {\n      var _add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              this.container.append(this.node);\n              this.animateToast('slide-in');\n\n              // Check Positions\n              window.toasty.setToastPositions();\n\n              // Await Delay + Slide Out\n              _context.next = 5;\n              return this.wait(this.delay + 300, true);\n            case 5:\n              if (!(this.interacting == false)) {\n                _context.next = 12;\n                break;\n              }\n              this.animateToast('slide-out');\n\n              // Await Slide Out + Remove Toast\n              _context.next = 9;\n              return this.wait(300);\n            case 9:\n              this.node.remove();\n              this.removeToastFromArray();\n\n              // Check Positions\n              window.toasty.setToastPositions();\n              //console.log( 'this.interacting', this.interacting );\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function add() {\n        return _add.apply(this, arguments);\n      }\n      return add;\n    }()\n  }, {\n    key: \"resetDelay\",\n    value: (\n    /*\n    // Destroy/Remove Element from DOM\n    destroy() {\n        this.node.remove();\n        this.removeToastFromArray();\n        console.log('💀 removed');\n    }\n    */\n    // Reset Delay then remove\n    function () {\n      var _resetDelay = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.wait(this.delay, true);\n            case 2:\n              if (!(this.interacting == false)) {\n                _context2.next = 9;\n                break;\n              }\n              // Play Slide Out Animation\n              this.animateToast('slide-out');\n\n              // Await Slide Out + Remove Toast\n              _context2.next = 6;\n              return this.wait(300);\n            case 6:\n              this.node.remove();\n              this.removeToastFromArray();\n\n              // Check Positions\n              window.toasty.setToastPositions();\n              //console.log( '⏱️ Reset Delay Finished... ⏱️ ', 'interacting', this.interacting );\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function resetDelay() {\n        return _resetDelay.apply(this, arguments);\n      }\n      return resetDelay;\n    }() // Remove Toast from Toaster Array\n    )\n  }, {\n    key: \"removeToastFromArray\",\n    value: function removeToastFromArray() {\n      var _this4 = this;\n      var toasty_arr = window.toasty.toasts;\n      var toasty_ids_arr = toasty_arr.map(function (toast) {\n        return toast.id;\n      });\n      var this_index = toasty_ids_arr.findIndex(function (id) {\n        return id == _this4.id;\n      });\n      //console.log('toast ids', toasty_ids_arr, 'my toast index: ', this_index );\n      toasty_arr.splice(this_index, 1);\n      //console.log( 'Toasty Array AFTER', toasty_arr );\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      var _this5 = this;\n      this.node.querySelector('.toasty-close').addEventListener('click', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              //console.log('clicked close...');\n\n              _this5.animateToast('slide-out');\n              _context3.next = 3;\n              return _this5.wait(310);\n            case 3:\n              _this5.node.remove();\n              _this5.removeToastFromArray();\n\n              // Check Positions\n              window.toasty.setToastPositions();\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      })));\n    }\n\n    // Slide to Dismiss\n  }, {\n    key: \"slideToDismiss\",\n    value: function slideToDismiss() {\n      var _this6 = this;\n      var isDown = false;\n      var startPosX = 0;\n      var dragPosX = 0;\n      var dragOffsetX = 0;\n      var newPosX;\n      var lastPosX;\n      var dragDirection;\n      var lastDirection;\n\n      // Drag Options\n      var resistance = 0.5;\n      var maxNegativeDirection = -30;\n\n      // Event Listeners - - - - - - - - - - - - - - - - - - - \n\n      // Mouse Over \n      this.node.addEventListener('mouseover', function (e) {\n        handleOver();\n      });\n\n      // Mouse Down / Touch Start\n      this.node.addEventListener('mousedown', function (e) {\n        handleDown(getEventAxis(e));\n      });\n      this.node.addEventListener('touchstart', function (e) {\n        handleDown(getEventAxis(e));\n      });\n\n      // Mouse Up / Touch End or Leave\n      this.node.addEventListener('mouseup', function (e) {\n        handleUp();\n      });\n      this.node.addEventListener('touchend', function (e) {\n        handleUp();\n        handleLeave();\n      });\n\n      // Mouse Leave\n      this.node.addEventListener('mouseleave', function (e) {\n        handleLeave();\n      });\n\n      // Mouse Moving / Touch Move\n      this.node.addEventListener('mousemove', function (e) {\n        handleMove(getEventAxis(e));\n      });\n      this.node.addEventListener('touchmove', function (e) {\n        handleMove(getEventAxis(e));\n      });\n\n      // Event Handlers - - - - - - - - - - - - - - - - - - -\n      var handleOver = function handleOver() {\n        _this6.interacting = true;\n      };\n      var handleDown = function handleDown(x) {\n        isDown = true;\n        _this6.interacting = true;\n        startPosX = x;\n        newPosX = x;\n        //console.log('mousdown event:', startPosX);\n\n        _this6.node.classList.add('dragging');\n      };\n      var handleUp = /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n          return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n            while (1) switch (_context4.prev = _context4.next) {\n              case 0:\n                isDown = false;\n\n                // Reset Offset\n                dragOffsetX = 0 + 'px';\n                _this6.node.style.setProperty('--drag-offset', dragOffsetX);\n                _this6.node.classList.remove('dragging');\n                if (!(dragDirection == 'right')) {\n                  _context4.next = 11;\n                  break;\n                }\n                //console.log('slide toast out');\n                _this6.node.animate([{\n                  translate: \"0% 0 0\"\n                }, {\n                  translate: \"150% 0 0\"\n                }], {\n                  fill: \"forwards\",\n                  duration: 300,\n                  iterations: 1\n                });\n                _context4.next = 8;\n                return _this6.wait(310);\n              case 8:\n                _this6.node.remove();\n                _this6.removeToastFromArray();\n\n                // Check Positions\n                window.toasty.setToastPositions();\n              case 11:\n                // Check Positions\n                window.toasty.setToastPositions();\n              case 12:\n              case \"end\":\n                return _context4.stop();\n            }\n          }, _callee4);\n        }));\n        return function handleUp() {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n      var handleLeave = function handleLeave() {\n        isDown = false;\n        _this6.interacting = false;\n        _this6.resetDelay();\n        _this6.node.classList.remove('dragging');\n\n        // Reset Offset\n        dragOffsetX = 0 + 'px';\n        _this6.node.style.setProperty('--drag-offset', dragOffsetX);\n\n        // Check Positions\n        window.toasty.setToastPositions();\n      };\n      var handleMove = function handleMove(x) {\n        if (isDown) {\n          _this6.interacting = true;\n          dragPosX = x;\n\n          // Get Direction\n          newPosX = x;\n          if (lastPosX > newPosX) dragDirection = 'left';else if (newPosX > lastPosX) dragDirection = 'right';\n\n          // Direction Changed + reset Position\n          if (lastDirection != dragDirection) {\n            startPosX = x;\n            //console.log('direction changed')\n          }\n\n          // Capture Last Position + Direction\n          lastPosX = x;\n          lastDirection = dragDirection;\n\n          // Set Offset\n          dragOffsetX = (startPosX - dragPosX) * -1 * resistance;\n          if (dragDirection == 'right') {\n            _this6.node.style.setProperty('--drag-offset', Math.max(dragOffsetX, maxNegativeDirection) + 'px');\n          } else if (dragDirection == 'left') {\n            dragOffsetX = Math.max(dragOffsetX, maxNegativeDirection);\n            _this6.node.style.setProperty('--drag-offset', dragOffsetX + 'px');\n          }\n          //console.log('dragOffsetX: ', dragOffsetX, 'drag direction: ', dragDirection);\n        }\n      };\n\n      // Check Desktop/Mobile Interaction \n      function getEventAxis(e) {\n        var eventType = e.type;\n        var x;\n        var y;\n        if (eventType == 'touchstart' || eventType == 'touchmove' || eventType == 'touchend') {\n          var touchEvent = e.changedTouches[0];\n          x = touchEvent.clientX;\n          y = touchEvent.clientY;\n        } else {\n          var _touchEvent = e;\n          x = _touchEvent.x;\n          y = _touchEvent.y;\n        }\n        if (x) {\n          //console.log('eventType', eventType, `x: ${x} - y: ${y}`);\n          return x;\n        }\n      }\n    }\n  }]);\n}();\nwindow.toasty = new Toaster();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/qf/v3-toasty.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/qf/v3-toasty.js"]();
/******/ 	
/******/ })()
;