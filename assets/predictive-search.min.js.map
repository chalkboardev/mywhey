{
  "version": 3,
  "file": "/assets/predictive-search.min.js",
  "mappings": "AAAAA,SAASC,iBAAiB,oBAAoB,WAC1C,IAAIC,EAAaF,SAASG,iBAAiB,mBACvCC,EAAiBJ,SAASK,cAAc,gCACxCC,EAAmBF,EAAeC,cAAc,UAEpDE,QAAQC,IAAI,UAEZN,EAAWO,SAAQ,SAAAC,GAGf,IAgCIC,EAhC6B,WAC7B,IAIQC,EAJFC,EAAe,uBAElBH,EAAUI,MAAMC,OAAS,EAGxBC,MAAM,qBAADC,OAAsBP,EAAUI,MAAK,gEAAAG,OAA+DJ,IACxGK,MAAK,SAACC,GAEH,OADAP,EAAkBO,EACXA,EAASC,MACpB,IACCF,MAAK,SAACE,GACH,IAAKR,EAAgBS,GACrB,MAAM,IAAIC,MAAM,GAADL,OAAIL,EAAgBW,OAAM,MAAAN,OAAKG,IAE9ChB,EAAeoB,UAAUC,IAAI,UAE7B,IAAMC,GAAgB,IAAIC,WACzBC,gBAAgBR,EAAM,aACtBf,cAAc,oBAADY,OAAqBJ,IAAgBgB,UAEnDvB,EAAiBuB,UAAYH,CACjC,IAAE,OACK,SAACI,GACJvB,QAAQuB,MAAMA,EAClB,KAEAxB,EAAiBuB,UAAY,GAC7BzB,EAAeoB,UAAUO,OAAO,UAExC,EAIGrB,GAAaJ,IACZI,EAAUT,iBAAiB,QAASU,GAClBP,EAAeC,cAAc,UACnCJ,iBAAiB,SAAS,WAClCG,EAAeoB,UAAUO,OAAO,SACpC,IAER,GAEJ",
  "sources": [
    "webpack://quickfire-shopify-theme/./resources/js/snippets/predictive-search.js"
  ],
  "sourcesContent": [
    "document.addEventListener('DOMContentLoaded', () => {\r\n    let searchBars = document.querySelectorAll('.search-trigger');\r\n    let resultsWrapper = document.querySelector('.predictive-search-container')\r\n    let resultsContainer = resultsWrapper.querySelector('.inner');\r\n\r\n    console.log(\"SEARCH\")\r\n\r\n    searchBars.forEach(searchBar => {\r\n    \r\n        // Site search using predictive search api\r\n        const predictiveSearchCallBack = () => {\r\n            const section_name = 'gb-predictive-search';\r\n\r\n            if(searchBar.value.length > 2){\r\n                \r\n                var requestResponse;\r\n                fetch(`/search/suggest?q=${searchBar.value}&resources[type]=product,collection,article,page&section_id=${section_name}`)\r\n                .then((response) => {\r\n                    requestResponse = response;\r\n                    return response.text();\r\n                })\r\n                .then((text) => {\r\n                    if (!requestResponse.ok) {\r\n                    throw new Error(`${requestResponse.status}: ${text}`);\r\n                    }\r\n                    resultsWrapper.classList.add('active');\r\n\r\n                    const resultsMarkup = new DOMParser()\r\n                    .parseFromString(text, 'text/html')\r\n                    .querySelector(`#shopify-section-${section_name}`).innerHTML;\r\n\r\n                    resultsContainer.innerHTML = resultsMarkup;\r\n                })\r\n                .catch((error) => {\r\n                    console.error(error);\r\n                });\r\n            } else {\r\n                resultsContainer.innerHTML = '';\r\n                resultsWrapper.classList.remove('active');\r\n            }\r\n        }\r\n    \r\n        let searchMethod = predictiveSearchCallBack;\r\n\r\n        if(searchBar && resultsContainer){\r\n            searchBar.addEventListener('keyup', searchMethod)\r\n            let closeButton = resultsWrapper.querySelector('.close');\r\n            closeButton.addEventListener('click', () => {\r\n                resultsWrapper.classList.remove('active');\r\n            })\r\n        }\r\n    })\r\n    \r\n})"
  ],
  "names": [
    "document",
    "addEventListener",
    "searchBars",
    "querySelectorAll",
    "resultsWrapper",
    "querySelector",
    "resultsContainer",
    "console",
    "log",
    "forEach",
    "searchBar",
    "searchMethod",
    "requestResponse",
    "section_name",
    "value",
    "length",
    "fetch",
    "concat",
    "then",
    "response",
    "text",
    "ok",
    "Error",
    "status",
    "classList",
    "add",
    "resultsMarkup",
    "DOMParser",
    "parseFromString",
    "innerHTML",
    "error",
    "remove"
  ],
  "sourceRoot": ""
}
