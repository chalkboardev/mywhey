{% comment %}

  === FUNCTIONALITY ===

  Section notes:

  	Image Gallery / Stacking
	Images to be presented as one large with smaller thumbnails on left
	All images expandable by clicking on magnifying glass. Closable by a ‘X’.
	Automatic scroll through images?
	Video? Autoplay?
	Mobile has thumbnails underneath main image
	Tags (bestseller, sale or new in) Colour ways taken from design
	Product details
	Desktop to the right of image gallery
	Mobile below image gallery
	Product name, small descriptions (ability to have a read more link to anchor down to more details with an accordion)
	Reviews and number of reviews given for specific product - app
	Price and compare at pricing
	Selectable variants - show which items are selected via border/colour fill (as in design)
	Ability to amend quantity to add to basket
	Ability to add to/remove from wishlist

	TO DO:
	Size guide - Image for the moment from files, but obviously this isn't very acccessible
	Product colour variants - HEX codes or photo swatches?
	Lightbox videos

  Section Author: Dan Hall

{% endcomment %}

{{ 'section-v2-main-product.min.css' | asset_url | stylesheet_tag: preload: true }}

<section id="main-product-container">

    <div class="page-width desktop-breadcrumbs">

      {% render 'v2-breadcrumbs' %}

    </div>

    <div id="main-product" class="page-width">

      <div class="gallery">

          {% render 'v2-product-gallery' %}

      </div>

      <div class="product-information">

              <div class="product-details">

                  <div class="mobile-breadcrumbs">

                    {% render 'v2-breadcrumbs' %}

                  </div>


          <div class="product-title-wrapper">

            <h1 class="heading-lg">{{ product.title | capitalize }}</h1>

            <div class="product-reviews">

              {% comment %} Paste review snippet here {% endcomment %}Reviews

            </div>

          </div>

          <div class="price">

            {% render 'v2-product-variant-prices', product: product %}

          </div>

          <div class="desc">

            {% render 'v2-product-description', read_more: true, product: product, char_limit: 230 %}

          </div>

          <div class="product-form">

            {%- form 'product', product -%}
              
              {%- unless product.has_only_default_variant -%}
                
                <div class="variant-selector-wrapper">
                  
                  <!-- Master Variant selector -->
                  <select name="id" id="product-id">
                    
                    {%- for variant in product.variants -%}
                      
                      <option value="{{ variant.id }}" {%- if variant == current_variant %} selected="selected"{%- endif -%}>
                        
                        {{- variant.title -}} - {{- variant.price | money -}}
                        
                      </option>
                      
                    {%- endfor -%}
                    
                  </select>
                  
                  <div class="option-radios-wrapper">
                    
                    {%- for option in product.options_with_values -%}
                      
                      <div class="radio-option" data-option="product-id-option-{{ forloop.index0 }}">
                        
                        <div class="option-name">
                          {{- option.name | escape -}}:
                        </div>
                        
                        <div class="variant-radios">
                          
                          {%- for value in option.values -%}
                            
                            <div class="variant-wrapper">
                              
                              <input type="radio" name="{{- option.name | escape -}}" value="{{- value | escape -}}" id="{{- value | escape -}}">
                              
                              <label for="{{- value | escape -}}">
                                {{- value -}}
                              </label>
                              
                            </div>
                            
                          {%- endfor -%}
                          
                        </div>
                        
                      </div>
                      
                    {%- endfor -%}
                    
                  </div>
                  
                </div>
                
              {%- else -%}
                <input type="hidden" id="product-id" name="id" value="{{ product.selected_or_first_available_variant.id }}">
              {%- endunless -%}

              {% comment %}
                =======================================================
                Line item property input

                Cart.js looks for inputs with the class 'property' and add this as a key-value pair object to the add.js POST API call

                Key is the input name
                Value is the input value

                <label for="test-line-item">Test line item</label>
                <input class="property" type="text" name="property" value="" id="test-line-item">

                These will display in the cart item

                Key: Value

                To hide from the cart item prepend an underscore to the input name
                <label for="test-line-item">Test line item</label>
                <input class="property" type="text" name="_property" value="" id="test-line-item">

                =======================================================
              {% endcomment %}
              {% comment %} <div>
                <label for="test-line-item">Test line item</label><br>
                <input class="property" type="text" name="property" value="" id="test-line-item">
              </div>
              <div>
                <label for="test-hidden-line-item">Test hidden line item</label><br>
                <input class="property" type="text" name="_hidden property" value="" id="test-hidden-line-item">
              </div> {% endcomment %}

              {% if product.available %}

                <div class="quantity-total-wrapper">

                  <div class="quantity-wrapper">

                    <div class="heading-md">

                      Quantity:

                    </div>

                    <div class="quantity-select">

                      <div class="minus"> - </div>

                      <div class="quantity"> 1 </div>

                      <div class="plus"> + </div>

                      <input style="display: none!important" type="number" id="quantity" name="quantity" value="1" min="1"  max="{% if product.selected_or_first_available_variant.inventory_management == "shopify"  and product.selected_or_first_available_variant.inventory_policy != "continue" %}{{ product.selected_or_first_available_variant.inventory_quantity }}{% else %}10000000{% endif %}" class="quantity-selector quantity-input" >

                    </div>

                  </div>

                  <div class="heading-md total">

                    Total: <span product-sub-total id="subtotal" class="heading-md">{{ product.selected_or_first_available_variant.price | money }}</span>

                  </div>

                </div>

              {% endif %}

              <div class="product-submit-wrapper">

                {% if product.available %}

                  <input type="submit" class="button-1" value="Add to Basket">

                  {% comment %} {% if additional_checkout_buttons %}

                    <div class="additional-checkout-buttons">
                      {{ content_for_additional_checkout_buttons }}
                    </div>

                  {% endif %} {% endcomment %}

                  {%- render 'v2-button-wishlist', product: product -%}


                {% endif %}

                {% if product.has_only_default_variant %}

                  {% unless product.available %}

                    <div class="oos-notification">

                      <div class="button-2">

                        {{ section.settings.oos_txt}}

                      </div>

                      {% render 'v2-button-wishlist', product: product %}

                    </div>

                  {% endunless %}

                {% else %}

                  <div class="oos-notification" style="display: none;">

                    <div class="button-2">

                      {{ section.settings.oos_txt}}

                    </div>

                    {% render 'v2-button-wishlist', product: product %}

                  </div>

                {% endif %}

              </div>

            {%- endform -%}

          </div>

        </div>

              {% comment %} Optional blocks, CTA, create the look etc {% endcomment %}

        <div class="pdp-blocks">

          {% for block in section.blocks %}

            {% case block.type %}

              {% when 'cta_banner' %}

                <div class="pdp-block">

                  <div class="cta-banner" style="background-color:{{ block.settings.bg_color }};color:{{ block.settings.text_color }}">

                      <div class="cta-banner-text heading-md">
                        {{ block.settings.text }}
                      </div>
                      {%- if block.settings.link != blank and block.settings.link_text != blank -%}
                        <div class="cta-banner-link">
                          <a
                            href="{{ block.settings.link }}"
                            class="button-2"
                            style="
                            {%- if block.settings.link_bg_color != blank -%}
                              background-color: {{ block.settings.link_bg_color }};
                            {%- endif -%}
                            {%- if block.settings.link_text_color != blank -%}
                              color: {{ block.settings.link_text_color }};
                            {%- endif -%}
                            "
                            aria-label="Link to {{ block.settings.link_text }}"
                          >
                          {{ block.settings.link_text }}
                          </a>
                        </div>
                      {%- endif -%}

                  </div>
                </div>

              {% when 'create_the_look' %}

                <div class="pdp-block">

                  {% render 'v2-create_the_look', product: product, heading: block.settings.heading %}

                </div>

              {% when 'reviews' %}

                <div class="pdp-block">

                  <div class="reviews-heading heading-md">

                    <h2 class="pdp-block-heading heading-md">

                      {{ block.settings.heading }}

                    </h2>

                  </div>

                  <div class="reviews-code">

                    {{ block.settings.code }}

                  </div>

                </div>

            {% endcase %}

          {% endfor %}

        </div>

      </div>

    </div>

</section>


{% comment %} BUILD PRODUCT SELECTORS {% endcomment %}
<script qv-run>
  document.addEventListener("DOMContentLoaded", () => {
    // TRACK VARIANT STOCK
    let variant_stock = {}

    {% for variant in product.variants %}

      {% if variant.inventory_management == "shopify" and variant.inventory_policy == "deny" %}
        variant_stock[{{ variant.id | json }}] = {{ variant.inventory_quantity | json }}
      {% else %}
        variant_stock[{{ variant.id | json }}] = Number.MAX_SAFE_INTEGER
      {% endif %}

    {% endfor %}

    {% unless product.has_only_default_variant %}

      // VARIANT SELECT CALLBACK
      var selectCallback = function(variant, selector) {
        let submit = document.querySelector("#main-product input[type=submit]");

        // if variant doesnt exist
        if(!variant) {
            submit.classList.add('unavailable');
            submit.setAttribute('disabled', "")
            submit.value = "{{ section.settings.unavailable_txt }}"
            return;
        }

        submit.classList.remove('unavailable');
        submit.removeAttribute('disabled', "")
        submit.value = "{{ section.settings.add_to_basket_txt }}"

        oos_visibility = variant.available ? 'none' : 'flex';
        submit_visibility = variant.available ? 'block' : 'none';
        quantity_visibility = variant.available ? 'flex' : 'none';
        submit = submit_visibility
        document.querySelector(".oos-notification").style.display = oos_visibility
        document.querySelector("#main-product input[type=submit] + button").style.display = submit_visibility
        document.querySelector("#main-product .quantity-wrapper").style.display = quantity_visibility

        // Reset quantity
        let quantity_input = document.getElementById("quantity")
        let quantity = document.querySelector(".quantity-select .quantity")

        quantity_input.setAttribute("value", 1 );
        quantity_input.setAttribute("max", variant_stock[variant.id] );

        quantity.innerHTML = 1

        // Show correct price for variant
        let current_price_el = document.querySelector(".variant-price-wrapper:not(.hidden)")
        let new_price_el = document.querySelector(`.variant-price-wrapper[data-variant-id="${variant.id}"]`)

        current_price_el.classList.add("hidden")
        new_price_el.classList.remove("hidden")

        // Reset subtotal
        let subtotal_el = document.querySelector('[product-sub-total]')

        let price_per = new_price_el.getAttribute("data-price")
        let subtotal = (parseFloat(price_per))
        let formattedPrice = Shopify.formatMoney(subtotal,'{{ shop.money_format }}');

        subtotal_el.innerHTML = formattedPrice;
      }

    // RADIO BUTTONS TO CONTROL SELECTS GENERATED BY SHOPIFY OPTION SELECTORS

    let master_selector = document.querySelector('#product-id');

    let radios = document.querySelectorAll('.option-radios-wrapper input[type=radio]');
      radios.forEach((radio) => {
      radio.addEventListener('change', (e) => {

        let radio_option = radio.closest('.radio-option').dataset.option;
        radio_option = '#' + radio_option;
        let radio_value = radio.value;

        // CHANGE SELECT VALUE

        let select = document.querySelector(radio_option);
        select.value = radio_value;

        select.onchange();
      })
    })


      // INIT VARIANT SELECTORS
      new Shopify.OptionSelectors('product-id', {
        product: {{ product | json }},
        onVariantSelected: selectCallback,
        enableHistoryState: true
      });



    // VARIANT URL CHANGE CHECKED RADIO

    setTimeout(()=>{
      let variant_selects = document.querySelectorAll('.product-form .single-option-selector');

      variant_selects.forEach((variant_select) => {

        let select_option = variant_select.id;
        let select_option_value =variant_select.value;

        let radio_to_check = document.querySelector(`.option-radios-wrapper .radio-option[data-option="${select_option}"] input[value="${select_option_value}"]`);

         radio_to_check.checked = true;
         radio_to_check.setAttribute("checked", true)

      })
    }, 1)

    {% endunless %}

    // QUANTITY LISTENERS
    let quantity_input = document.getElementById("quantity")

    let minus = document.querySelector(".quantity-select .minus")
    let quantity = document.querySelector(".quantity-select .quantity")
    let plus = document.querySelector(".quantity-select .plus")

    const set_new_price = () => {
      let price_el = document.querySelector(".variant-price-wrapper:not(.hidden)")
      let subtotal_el = document.querySelector('[product-sub-total]')
      let price_per = price_el.getAttribute("data-price")
      let subtotal = (parseFloat(price_per) * parseFloat(quantity_input.value))
      let formattedPrice = Shopify.formatMoney(subtotal,'{{ shop.money_format }}');
      subtotal_el.innerHTML = formattedPrice
    }


    if(quantity_input){
      minus.addEventListener("click", () => {
          let current_value = quantity_input.getAttribute("value")
          let new_value = parseInt(current_value) - 1;
          if(new_value > 0){
            // Set quantity
            quantity_input.setAttribute("value", new_value)
            quantity.innerHTML = new_value
            // Set subtotal
            set_new_price();
          }
      })

      plus.addEventListener("click", () => {
        let current_value = quantity_input.getAttribute("value")
        let new_value = parseInt(current_value) + 1;
        let max = quantity_input.getAttribute("max")

        if(new_value <= max){
          // Set quantity
          quantity_input.setAttribute("value", new_value)
          quantity.innerHTML = new_value
          // Set subtotal
          set_new_price();
        }
      })
    }
  });
</script>

{% schema %}
{
  "name": "Main product",
  "class": "main-product margin-bottom-l",
  "settings": [
    {
      "type": "header",
      "content": "Add to Basket"
    },
    {
      "type": "text",
      "id": "add_to_basket_txt",
      "label": "Add to basket button text",
      "default": "Add to Basket"
    },
    {
      "type": "text",
      "id": "oos_txt",
      "label": "Add to basket (Out of Stock)",
      "default": "Sold Out"
    },
    {
      "type": "text",
      "id": "unavailable_txt",
      "label": "Add to basket (Unavailable)",
      "default": "Unavailable"
    }
  ],
  "blocks": [
    {
      "type": "create_the_look",
      "name": "Create the look",
      "limit": 1,
      "settings": [
        {
          "type": "inline_richtext",
          "id": "heading",
          "default": "Create the look",
          "label": "Heading"
        }
      ]
    },
    {
      "type": "reviews",
      "name": "Reviews",
      "limit": 1,
      "settings": [
        {
          "type": "inline_richtext",
          "id": "heading",
          "default": "Reviews",
          "label": "Heading"
        },
        {
          "type": "html",
          "id": "review_code",
          "label": "Reviews widget code"
        }
      ]
    },
    {
      "type": "cta_banner",
      "name": "CTA banner",
      "limit": 1,
      "settings": [
        {
          "type": "header",
          "content": "Content"
        },
        {
          "type": "inline_richtext",
          "id": "text",
          "default": "CTA Banner - Lorem ipsum dolor",
          "label": "Text"
        },
        {
          "type": "text",
          "id": "link_text",
          "label": "Link text"
        },
        {
          "type": "url",
          "id": "link",
          "label": "Link"
        },
        {
          "type": "header",
          "content": "Colours"
        },
        {
          "type": "color",
          "id": "bg_color",
          "label": "Background colour",
          "default": "#eeeeee"
        },
        {
          "type": "color",
          "id": "text_color",
          "label": "Text colour",
          "default": "#333333"
        },
        {
          "type": "color",
          "id": "link_bg_color",
          "label": "Link background colour",
          "default": "#000000"
        },
        {
          "type": "color",
          "id": "link_text_color",
          "label": "Link text colour",
          "default": "#ffffff"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Main Product"
    }
  ]
}
{% endschema %}